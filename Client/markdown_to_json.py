#!/usr/bin/env python3
"""
Markdown to JSON Converter

Converts markdown files generated by pdf_to_markdown_processor.py into JSON format
compatible with output_parsed.json schema.

Each page is split by '<--- Page N End --->' markers and converted into a structured
JSON object with text, tables, and image references.
"""

import json
import re
import base64
from pathlib import Path
from typing import List, Dict, Any, Optional
from html.parser import HTMLParser


class TableHTMLParser(HTMLParser):
    """Parse HTML tables into structured data"""

    def __init__(self):
        super().__init__()
        self.tables = []
        self.current_table = None
        self.current_row = None
        self.current_cell = ''
        self.in_table = False
        self.in_row = False
        self.in_cell = False

    def handle_starttag(self, tag, attrs):
        if tag == 'table':
            self.in_table = True
            self.current_table = {'rows': []}
        elif tag == 'tr' and self.in_table:
            self.in_row = True
            self.current_row = []
        elif tag == 'td' and self.in_row:
            self.in_cell = True
            self.current_cell = ''

    def handle_endtag(self, tag):
        if tag == 'table':
            if self.current_table:
                self.tables.append(self.current_table)
            self.in_table = False
            self.current_table = None
        elif tag == 'tr' and self.in_row:
            if self.current_row is not None:
                self.current_table['rows'].append(self.current_row)
            self.in_row = False
            self.current_row = None
        elif tag == 'td' and self.in_cell:
            if self.current_row is not None:
                self.current_row.append(self.current_cell.strip())
            self.in_cell = False
            self.current_cell = ''

    def handle_data(self, data):
        if self.in_cell:
            self.current_cell += data


class MarkdownToJSONConverter:
    """Convert markdown to JSON matching output_parsed.json schema"""

    def __init__(self, markdown_file: str, images_folder: Optional[str] = None):
        """
        Initialize converter

        Args:
            markdown_file: Path to markdown file
            images_folder: Path to images folder (default: same dir as markdown/images)
        """
        self.markdown_file = Path(markdown_file)
        self.markdown_dir = self.markdown_file.parent

        if images_folder:
            self.images_folder = Path(images_folder)
        else:
            self.images_folder = self.markdown_dir / "images"

        # Read markdown content
        with open(self.markdown_file, 'r', encoding='utf-8') as f:
            self.content = f.read()

    def _extract_pages(self) -> List[str]:
        """
        Split markdown content by page markers

        Returns:
            List of page content strings
        """
        # Split by page markers like '<--- Page 1 End --->'
        page_pattern = r'<--- Page \d+ End --->'
        pages = re.split(page_pattern, self.content)

        # Remove empty pages
        pages = [p.strip() for p in pages if p.strip()]

        return pages

    def _parse_tables_from_html(self, content: str) -> List[Dict[str, Any]]:
        """
        Extract tables from HTML table tags in markdown

        Args:
            content: Markdown content containing HTML tables

        Returns:
            List of table dictionaries
        """
        parser = TableHTMLParser()
        parser.feed(content)

        tables = []
        for raw_table in parser.tables:
            if not raw_table['rows']:
                continue

            # First row is typically headers
            rows = raw_table['rows']
            if len(rows) > 0:
                columns = rows[0] if rows[0] else []
                data = rows[1:] if len(rows) > 1 else []

                # Remove empty columns
                columns = [c for c in columns if c]

                tables.append({
                    'columns': columns,
                    'data': data,
                    'extends_to_bottom': False,
                    'chart_data': True  # Assume chart data if extracted from figure
                })

        return tables

    def _extract_images(self, content: str) -> List[str]:
        """
        Extract image references and convert to base64

        Args:
            content: Markdown content

        Returns:
            List of base64 encoded images
        """
        # Find image references like ![](images/filename.jpg)
        image_pattern = r'!\[\]\(images/([^)]+)\)'
        image_files = re.findall(image_pattern, content)

        images_base64 = []
        for img_file in image_files:
            img_path = self.images_folder / img_file
            if img_path.exists():
                try:
                    with open(img_path, 'rb') as f:
                        img_data = f.read()
                        img_base64 = base64.b64encode(img_data).decode('utf-8')
                        images_base64.append(img_base64)
                except Exception as e:
                    print(f"Warning: Could not read image {img_file}: {e}")

        return images_base64

    def _clean_text_content(self, content: str) -> str:
        """
        Clean markdown content to extract plain text

        Args:
            content: Markdown content

        Returns:
            Cleaned text
        """
        # Remove HTML tables (they're extracted separately)
        content = re.sub(r'<table>.*?</table>', '', content, flags=re.DOTALL)

        # Remove image markers
        content = re.sub(r'!\[\]\(images/[^)]+\)', '', content)

        # Remove figure/chart content markers
        content = re.sub(r'\*\*\[Figure/Chart Content\]\*\*', '', content)

        # Remove excessive whitespace
        content = re.sub(r'\n\n+', '\n', content)

        return content.strip()

    def convert(self) -> Dict[str, Any]:
        """
        Convert markdown to JSON format

        Returns:
            Dictionary matching output_parsed.json schema
        """
        pages_content = self._extract_pages()

        # Build JSON structure
        result = {
            "pdf_document": {
                "document_id": f"doc_{self.markdown_file.stem.replace('-MD', '')}",
                "filename": self.markdown_file.stem.replace('-MD', '') + '.pdf',
                "total_pages": len(pages_content),
                "metadata": {}
            },
            "pages": []
        }

        # Process each page
        for page_idx, page_content in enumerate(pages_content, start=1):
            # Extract tables
            tables = self._parse_tables_from_html(page_content)

            # Extract images
            images_base64 = self._extract_images(page_content)

            # Clean text
            text = self._clean_text_content(page_content)

            page_obj = {
                "page_id": f"page_{page_idx}",
                "pdf_title": result["pdf_document"]["filename"],
                "text": text,
                "tables": tables,
                "image_base64": images_base64
            }

            result["pages"].append(page_obj)

        return result

    def save_json(self, output_file: str):
        """
        Convert and save to JSON file

        Args:
            output_file: Path to output JSON file
        """
        result = self.convert()

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        print(f"Converted {len(result['pages'])} pages")
        print(f"Saved to: {output_file}")


def main():
    """Main function to run the converter"""
    import argparse

    parser = argparse.ArgumentParser(description='Convert markdown to JSON')
    parser.add_argument('markdown_file', help='Path to markdown file')
    parser.add_argument('-o', '--output', help='Output JSON file (default: same name as input with .json extension)')
    parser.add_argument('-i', '--images', help='Path to images folder (default: markdown_dir/images)')

    args = parser.parse_args()

    # Determine output file
    if args.output:
        output_file = args.output
    else:
        output_file = Path(args.markdown_file).with_suffix('.json')

    # Create converter
    converter = MarkdownToJSONConverter(
        markdown_file=args.markdown_file,
        images_folder=args.images
    )

    # Convert and save
    converter.save_json(str(output_file))


if __name__ == "__main__":
    main()
